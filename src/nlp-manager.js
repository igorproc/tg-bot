import * as nlp from 'node-nlp';
import { v4 as uuidV4 } from 'uuid'
import { createRequestInstance } from './integrations/ai.js';

const trainingData = [
    {
        intent: 'developer.info',
        utterances: [
            '–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª',
            '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ',
            '–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å',
            '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ'
        ],
        answers: [
            '–ú–µ–Ω—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª —Å—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–ø—ã –ò–°-3-23',
            '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: —Å—Ç—É–¥–µ–Ω—Ç 2 –∫—É—Ä—Å–∞ –≥—Ä—É–ø–ø—ã –ò–°-3-23',
            '–°–æ–∑–¥–∞—Ç–µ–ª—å: –ò–°-3-23, –ø—Ä–æ–µ–∫—Ç –æ—Ç 13.02.2025'
        ]
    },
    {
        intent: 'greeting',
        utterances: [
            '–ø—Ä–∏–≤–µ—Ç',
            '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π',
            '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å',
            '—Ö–∞–π'
        ],
        answers: [
            '–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
            '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å',
            '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã'
        ]
    },
    {
        intent: 'bot.capabilities',
        utterances: [
            '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å',
            '—Ç–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
            '–∫–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏',
            '—Ç–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª'
        ],
        answers: [
            '–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π',
            '–ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
            '–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: NLP-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤'
        ]
    },
    {
        intent: 'bot.question',
        utterances: [],
        answers: [],
    }
];

const manager = new nlp.NlpManager({
    languages: ['ru'],
    forceNER: true,
    nlu: { log: true }
});

let modelLoaded = false;

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
export function addTrainingData() {
    trainingData.forEach(data => {
        data.utterances.forEach(utterance => {
            manager.addDocument('ru', utterance, data.intent);
        });

        data.answers.forEach(answer => {
            manager.addAnswer('ru', data.intent, answer);
        });
    });
}

export async function createAiRequest(text) {
    const axiosInstance = createRequestInstance({ apiUrl: 'https://openrouter.ai/api/v1', secure: { header: 'Authorization' } })

    const data = await axiosInstance(
        'POST',
        'chat/completions',
        `Bearer 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`,
        {
            model: 'deepseek/deepseek-r1-0528-qwen3-8b:free',
            messages: [{ role: 'user', content: text }]
        },
    )

    if (!data?.choices?.length) {
        console.log(data)
        return ''
    }

    return data?.choices[0]?.message?.content || ''
}

export async function addIntentToModel(intentData) {

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑
    for (const utterance of intentData.utterances) {
        manager.addDocument('ru', utterance, intentData.intent);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
    for (const answer of intentData.answers) {
        manager.addAnswer('ru', intentData.intent, answer);
    }

    // –î–æ–æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await manager.train();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    await manager.save('./model.nlp');

    console.log(`‚úÖ –ò–Ω—Ç–µ–Ω—Ç "${intentData.intent}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`);
}

async function addNewField(utterance = '', answer = '', intent = 'bot.question') {
    const uuid = uuidV4();
    const intentHash = `${intent}-${uuid}`;

    await addIntentToModel({ intent: intentHash, utterances: [utterance], answers: [answer] })
    return answer;
}

// –û–±—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
export async function trainModel() {
    console.log('üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...');
    addTrainingData();
    await manager.train();
    await manager.save('./model.nlp');
    console.log('‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
export async function loadNlpModel() {
    if (modelLoaded) {
        return;
    }

    try {
        await manager.load('./model.nlp');
        console.log('üîß –ú–æ–¥–µ–ª—å NLP –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        modelLoaded = true;
    } catch (e) {
        console.log('‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ...');
        await trainModel();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
export async function processMessage(text) {
    if (!modelLoaded) {
        await loadNlpModel();
    }

    const response = await manager.process('ru', text);
    if (!response.answer) {
        const generatedData = await createAiRequest(text)

        return await addNewField(text, generatedData)
    }

    return response.answer || '';
}

// –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
if (process.argv.includes('train')) {
    (async () => {
        try {
            console.log('üöÄ –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏...');
            await trainModel();
            console.log('üéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
            process.exit(0);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏:', error);
            process.exit(1);
        }
    })();
}
