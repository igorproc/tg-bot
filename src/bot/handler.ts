import { Context } from 'telegraf';
// @ts-ignore
import { processMessage } from '../nlp-manager.js';

type BotCommandHandler = (ctx: Context) => {
    message: string,
    reply_markup?: unknown
};

// /start

export const startHandler: BotCommandHandler = (ctx) => {
    return {
        message: 'ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–±–æ—Ç. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å!\n' +
            'üëâ /about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ',
        reply_markup: {
            keyboard: [[{ text: '–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ' }]],
            resize_keyboard: true
        }
    }
};

// /about
export const aboutHandler: BotCommandHandler = (ctx) => {
    return {
        message: `
          üßë‚Äçüíª –ü—Ä–æ—Å–≤–∏—Ä–Ω–∏–Ω –ò–≥–æ—Ä—å: 
          –°—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–ø—ã –ò–°-3-23
          –ö—É—Ä—Å: 2
          –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 13.02.2025
          –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: Telegraf, NLP, TypeScript
        `
    };
};

// text

export const textHandler = async (ctx: Context & { message: { text: string } }): Promise<ReturnType<BotCommandHandler>> => {
    const messageText = ctx.message.text.toLowerCase();

    if (messageText.includes('—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫') || messageText.includes('—Å–æ–∑–¥–∞—Ç–µ–ª—å')) {
        return aboutHandler(ctx);
    }

    try {
        const response = await processMessage(ctx.message.text);

        return { message: response || '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å ü§î' };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        return { message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞' }
    }
};
